---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';
// getStaticPaths() returns an array of page routes, and all of the pages at the routes will use the same template defined in this file, aka the BaseLayout template. getStaticPaths() should always return a list of objects containing `params` (what to call each page route) and optionally any `props` (data that you want to pass to those pages). Earlier, youd efined each tag name that you knew was used in your blog and passed the entire list of posts as props to each page. This refactored fn generates the list of object automatically using your `uniqueTags` array to define each param. And now the list of all posts is filtered BEFORE it's sent to each page as props. 
export async function getStaticPaths() {
  // added to make the data from all the blog posts available to each page route:
  const allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));

  // The following added to help automatically look for and generate pages for each tag used in the blog pages without having to manually add each one like with the params list any time you add a new tag. 
  // It goes thru each Markdown post, one by one, and combines each array of tags in its frontmatter into one single larger array. Then, it makes a new `Set` from all the individual tags it found (to ignore repeated values). Finally, it turns that set into an array (with no dupes), that you can use to show a list of tags on your page.
  // EARLIER MANUALLY SPEC'D CODE:
  // return [
  //   { params: { tag: "astro" }, props: {posts: allPosts} },
  //   { params: { tag: "successes" }, props: {posts: allPosts} },
  //   { params: { tag: "community" }, props: {posts: allPosts} },
  //   { params: { tag: "blogging" }, props: {posts: allPosts} },
  //   { params: { tag: "setbacks" }, props: {posts: allPosts} },
  //   { params: { tag: "learning in public" }, props: {posts: allPosts} },
  // ];
  // REFORMATTED:
  const uniqueTags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post: any) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params; // makes the params available to component template outside of the getStaticPaths function
const { posts } = Astro.props; // same, but makes props available
// filter the list of posts, using Astro's built-in TypeScript support, to only include posts that contain the page's own tag:
---
<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <ul>
    // map over the filteredPosts array and create an instance of the BlogPost component for each, passing in the url and title as props
    {posts.map((post: any) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}
  </ul>
</BaseLayout>